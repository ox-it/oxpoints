default namespace = "http://www.tei-c.org/ns/1.0"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"

# Schema generated from ODD source 2010-03-08T15:03:53Z. 
# Edition: 1.6.0. Last updated on February 12th 2010.
#

#
macro.paraContent =
  (text | model.gLike | model.phrase | model.inter | model.global)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq = (text | model.gLike | model.phrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
att.canonical.attributes = empty
att.ranging.attributes = empty
att.dimensions.attributes = att.ranging.attributes
att.datable.w3c.attributes =
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form,
  ##       e.g. yyyy-mm-dd.
  attribute when {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard
  ##	  form, e.g. yyyy-mm-dd.
  attribute to {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.declaring.attributes = empty
att.responsibility.attributes =
  att.responsibility.attribute.cert, att.responsibility.attribute.resp
att.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert { "high" | "medium" | "low" | "unknown" }?
att.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an
  ##         editor or transcriber.
  attribute resp {
    list { xsd:anyURI+ }
  }?
att.editLike.attributes =
  att.dimensions.attributes, att.responsibility.attributes
att.global.attributes =
  att.global.linking.attributes,
  att.global.attribute.rend,
  att.global.attribute.xmlspace
att.global.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?
att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be 
  ##       managed by  applications.
  attribute xml:space {
    
    ## the processor should treat white space according to the
    ##	default XML white space handling rules
    "default"
    | 
      ## the processor should preserve unchanged any and all
      ##	white space in the source
      "preserve"
  }?
att.internetMedia.attributes = empty
att.naming.attributes =
  att.canonical.attributes, att.naming.attribute.role
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by
  ## this name, for example the occupation of a person, or the status of a place.
  attribute role { xsd:Name }?
att.placement.attributes = empty
att.segLike.attributes = empty
att.translatable.attributes = empty
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient
  ##  classification scheme or typology.
  attribute type { xsd:Name }?
att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype { xsd:Name }?
model.nameLike.agent = orgName
model.nameLike.agent_alternation = orgName
model.nameLike.agent_sequence = orgName
model.nameLike.agent_sequenceOptional = orgName?
model.nameLike.agent_sequenceOptionalRepeatable = orgName*
model.nameLike.agent_sequenceRepeatable = orgName+
model.segLike = seg
model.segLike_alternation = seg
model.segLike_sequence = seg
model.segLike_sequenceOptional = seg?
model.segLike_sequenceOptionalRepeatable = seg*
model.segLike_sequenceRepeatable = seg+
model.measureLike = geo
model.measureLike_alternation = geo
model.measureLike_sequence = geo
model.measureLike_sequenceOptional = geo?
model.measureLike_sequenceOptionalRepeatable = geo*
model.measureLike_sequenceRepeatable = geo+
model.egLike = notAllowed
model.egLike_alternation = notAllowed
model.egLike_sequence = empty
model.egLike_sequenceOptional = empty
model.egLike_sequenceOptionalRepeatable = empty
model.egLike_sequenceRepeatable = notAllowed
model.graphicLike = graphic
model.graphicLike_alternation = graphic
model.graphicLike_sequence = graphic
model.graphicLike_sequenceOptional = graphic?
model.graphicLike_sequenceOptionalRepeatable = graphic*
model.graphicLike_sequenceRepeatable = graphic+
model.offsetLike = notAllowed
model.offsetLike_alternation = notAllowed
model.offsetLike_sequence = empty
model.offsetLike_sequenceOptional = empty
model.offsetLike_sequenceOptionalRepeatable = empty
model.offsetLike_sequenceRepeatable = notAllowed
model.ptrLike = ptr | ref
model.ptrLike_alternation = ptr | ref
model.ptrLike_sequence = ptr, ref
model.ptrLike_sequenceOptional = ptr?, ref?
model.ptrLike_sequenceOptionalRepeatable = ptr*, ref*
model.ptrLike_sequenceRepeatable = ptr+, ref+
model.global.meta =
  link | linkGrp | timeline | join | joinGrp | alt | altGrp
model.global.meta_alternation =
  link | linkGrp | timeline | join | joinGrp | alt | altGrp
model.global.meta_sequence =
  link, linkGrp, timeline, join, joinGrp, alt, altGrp
model.global.meta_sequenceOptional =
  link?, linkGrp?, timeline?, join?, joinGrp?, alt?, altGrp?
model.global.meta_sequenceOptionalRepeatable =
  link*, linkGrp*, timeline*, join*, joinGrp*, alt*, altGrp*
model.global.meta_sequenceRepeatable =
  link+, linkGrp+, timeline+, join+, joinGrp+, alt+, altGrp+
model.milestoneLike = anchor
model.milestoneLike_alternation = anchor
model.milestoneLike_sequence = anchor
model.milestoneLike_sequenceOptional = anchor?
model.milestoneLike_sequenceOptionalRepeatable = anchor*
model.milestoneLike_sequenceRepeatable = anchor+
model.gLike = notAllowed
model.biblLike = notAllowed
model.biblLike_alternation = notAllowed
model.biblLike_sequence = empty
model.biblLike_sequenceOptional = empty
model.biblLike_sequenceOptionalRepeatable = empty
model.biblLike_sequenceRepeatable = notAllowed
model.headLike = notAllowed
model.headLike_alternation = notAllowed
model.headLike_sequence = empty
model.headLike_sequenceOptional = empty
model.headLike_sequenceOptionalRepeatable = empty
model.headLike_sequenceRepeatable = notAllowed
model.labelLike = desc | label | idno
model.labelLike_alternation = desc | label | idno
model.labelLike_sequence = desc, label, idno
model.labelLike_sequenceOptional = desc?, label?, idno?
model.labelLike_sequenceOptionalRepeatable = desc*, label*, idno*
model.labelLike_sequenceRepeatable = desc+, label+, idno+
model.noteLike = note
model.noteLike_alternation = note
model.noteLike_sequence = note
model.noteLike_sequenceOptional = note?
model.noteLike_sequenceOptionalRepeatable = note*
model.noteLike_sequenceRepeatable = note+
model.pLike = ab
model.pLike_alternation = ab
model.pLike_sequence = ab
model.pLike_sequenceOptional = ab?
model.pLike_sequenceOptionalRepeatable = ab*
model.pLike_sequenceRepeatable = ab+
model.divPart = model.pLike
model.divPart_alternation = model.pLike_alternation
model.divPart_sequence = model.pLike_sequence
model.divPart_sequenceOptional = model.pLike_sequenceOptional?
model.divPart_sequenceOptionalRepeatable =
  model.pLike_sequenceOptionalRepeatable*
model.divPart_sequenceRepeatable = model.pLike_sequenceRepeatable+
model.persTraitLike = trait
model.persTraitLike_alternation = trait
model.persTraitLike_sequence = trait
model.persTraitLike_sequenceOptional = trait?
model.persTraitLike_sequenceOptionalRepeatable = trait*
model.persTraitLike_sequenceRepeatable = trait+
model.placeTraitLike = location | relation | trait
model.placeNamePart = placeName
model.placeNamePart_alternation = placeName
model.placeNamePart_sequence = placeName
model.placeNamePart_sequenceOptional = placeName?
model.placeNamePart_sequenceOptionalRepeatable = placeName*
model.placeNamePart_sequenceRepeatable = placeName+
model.placeStateLike = model.placeNamePart
model.placeStateLike_alternation = model.placeNamePart_alternation
model.placeStateLike_sequence = model.placeNamePart_sequence
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+
model.placeEventLike = notAllowed
model.glossLike = desc
model.divTopPart = model.headLike
model.divTopPart_alternation = model.headLike_alternation
model.divTopPart_sequence = model.headLike_sequence
model.divTopPart_sequenceOptional = model.headLike_sequenceOptional?
model.divTopPart_sequenceOptionalRepeatable =
  model.headLike_sequenceOptionalRepeatable*
model.divTopPart_sequenceRepeatable = model.headLike_sequenceRepeatable+
model.addressLike = email | address
model.addressLike_alternation = email | address
model.addressLike_sequence = email, address
model.addressLike_sequenceOptional = email?, address?
model.addressLike_sequenceOptionalRepeatable = email*, address*
model.addressLike_sequenceRepeatable = email+, address+
model.nameLike =
  model.nameLike.agent | model.offsetLike | model.placeStateLike
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+
model.global =
  model.global.meta | model.milestoneLike | model.noteLike | figure
model.addrPart = model.nameLike | addrLine | street | postCode | postBox
model.pPart.data =
  model.measureLike | model.addressLike | model.nameLike
model.pPart.data_alternation =
  model.measureLike_alternation
  | model.addressLike_alternation
  | model.nameLike_alternation
model.pPart.data_sequence =
  model.measureLike_sequence,
  model.addressLike_sequence,
  model.nameLike_sequence
model.pPart.data_sequenceOptional =
  model.measureLike_sequenceOptional?,
  model.addressLike_sequenceOptional?,
  model.nameLike_sequenceOptional?
model.pPart.data_sequenceOptionalRepeatable =
  model.measureLike_sequenceOptionalRepeatable*,
  model.addressLike_sequenceOptionalRepeatable*,
  model.nameLike_sequenceOptionalRepeatable*
model.pPart.data_sequenceRepeatable =
  model.measureLike_sequenceRepeatable+,
  model.addressLike_sequenceRepeatable+,
  model.nameLike_sequenceRepeatable+
model.inter = model.egLike | model.biblLike | model.labelLike
model.inter_alternation =
  model.egLike_alternation
  | model.biblLike_alternation
  | model.labelLike_alternation
model.inter_sequence =
  model.egLike_sequence,
  model.biblLike_sequence,
  model.labelLike_sequence
model.inter_sequenceOptional =
  model.egLike_sequenceOptional?,
  model.biblLike_sequenceOptional?,
  model.labelLike_sequenceOptional?
model.inter_sequenceOptionalRepeatable =
  model.egLike_sequenceOptionalRepeatable*,
  model.biblLike_sequenceOptionalRepeatable*,
  model.labelLike_sequenceOptionalRepeatable*
model.inter_sequenceRepeatable =
  model.egLike_sequenceRepeatable+,
  model.biblLike_sequenceRepeatable+,
  model.labelLike_sequenceRepeatable+
model.phrase =
  model.segLike | model.graphicLike | model.ptrLike | model.pPart.data
model.limitedPhrase = model.ptrLike | model.pPart.data
att.personal.attributes = att.naming.attributes
model.placeLike = place
desc =
  
  ## (description) contains a brief description of the object documented by its parent element, including its
  ##     intended usage, purpose, or application where this is appropriate.
  element desc {
    macro.limitedContent,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.translatable.attributes,
    empty
  }
email =
  
  ## (electronic mail address) contains an e-mail address identifying a location to which
  ##         e-mail messages can be delivered.
  element email { macro.phraseSeq, att.global.attributes, empty }
address =
  
  ## contains a postal  address, for example of a
  ##         publisher, an organization, or an individual.
  element address {
    (model.global*, (model.addrPart, model.global*)+),
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    empty
  }
addrLine =
  
  ## (address line) contains one line of a postal address.
  element addrLine {
    macro.phraseSeq,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    empty
  }
street =
  
  ## a full street address including any name or number identifying a
  ##         building as well as the name of the street or route on which it is
  ##         located.
  element street { macro.phraseSeq, att.global.attributes, empty }
postCode =
  
  ## (postal code) contains a numerical or alphanumeric code used as part of a postal address to simplify
  ##         sorting or delivery of mail.
  element postCode {
    text,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    empty
  }
postBox =
  
  ## (postal box or post office box) contains a number or other identifier for some postal delivery point other than a street
  ##     address.
  element postBox { text, att.global.attributes, empty }
ptr =
  
  ## (pointer) defines a pointer to another location.
  element ptr {
    empty
    >> sch:pattern [
         id = "ptr-constraint-ptrAtts"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "the target and cRef\x{a}" ~
             "	attributes are mutually exclusive."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    (
     ## specifies the destination of the pointer by supplying one or more URI References
     attribute target {
       list { xsd:anyURI+ }
     }),
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.pointing.attribute.evaluate,
    att.declaring.attributes,
    empty
  }
ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment.
  element ref {
    macro.paraContent,
    (
     ## specifies the destination of the reference by supplying one or more URI References
     attribute target {
       list { xsd:anyURI+ }
     }?),
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    
    ## categorizes the pointer in some respect, using any
    ##       convenient set of categories.
    attribute type {
      
      ##
      "osm"
    }?,
    att.pointing.attribute.evaluate,
    att.declaring.attributes,
    empty
  }
label =
  
  ## contains the label associated with an item in a list; in glossaries, marks the term being
  ##     defined.
  element label {
    macro.phraseSeq,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    empty
  }
note =
  
  ## contains a note or annotation.
  element note {
    macro.specialPara,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.placement.attributes,
    att.responsibility.attribute.cert,
    empty
  }
graphic =
  
  ## indicates the location of an inline graphic, illustration, or figure.
  element graphic {
    empty,
    
    ## The display width of the image
    attribute width {
      xsd:token {
        pattern =
          "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
      }
    }?,
    
    ## The display height of the image
    attribute height {
      xsd:token {
        pattern =
          "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
      }
    }?,
    
    ## A scale factor to be applied to the image to make it the desired display size
    attribute scale {
      xsd:double
      | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
      | xsd:decimal
    }?,
    
    ## (uniform resource locator) A URL which refers to the image itself.
    attribute url { xsd:anyURI }?,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.internetMedia.attributes,
    att.declaring.attributes,
    empty
  }
idno =
  
  ## (identifying number) supplies any number or other identifier used to identify a bibliographic item in a
  ##     standardized way.
  element idno {
    text,
    
    ## categorizes the number, for example as an ISBN or other standard series.
    attribute type {
      
      ##
      "obn"
      | 
        ##
        "olis"
      | 
        ##
        "oliscode"
      | 
        ##
        "oucs"
      | 
        ##
        "oxpID"
    }?,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    empty
  }
link =
  
  ## defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements.
  element link {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    
    ## specifies the identifiers of the elements or passages to be linked or associated.
    attribute targets {
      list { xsd:anyURI, xsd:anyURI+ }
    },
    empty
  }
linkGrp =
  
  ## (link group) defines a collection of associations or hypertextual links.
  element linkGrp {
    (link | ptr)+,
    att.global.attributes,
    att.pointing.group.attributes,
    empty
  }
ab =
  
  ## (anonymous block) contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph.
  element ab {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    
    ## specifies whether or not the block is complete.
    [ a:defaultValue = "N" ]
    attribute part {
      
      ## (yes) the block is incomplete
      "Y"
      | 
        ## (no) either the block is complete, or no claim is made as to its completeness
        "N"
      | 
        ## (initial) the initial part of an incomplete block
        "I"
      | 
        ## (medial) a medial part of an incomplete block
        "M"
      | 
        ## (final) the final part of an incomplete block
        "F"
    }?,
    empty
  }
anchor =
  
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element.
  element anchor {
    empty, att.global.attributes, att.typed.attributes, empty
  }
seg =
  
  ## (arbitrary segment) represents any segmentation of text below the chunk level.
  element seg {
    macro.paraContent,
    att.global.attributes,
    att.segLike.attributes,
    att.typed.attributes,
    empty
  }
when =
  
  ## indicates a point in time either relative to other elements in the same timeline tag, or absolutely.
  element when {
    empty,
    att.global.attributes,
    
    ## supplies an absolute value for the time.
    attribute absolute {
      xsd:date
      | xsd:gYear
      | xsd:gMonth
      | xsd:gDay
      | xsd:gYearMonth
      | xsd:gMonthDay
      | xsd:time
      | xsd:dateTime
    }?,
    
    ## specifies the unit of time in which the interval value is expressed, if this is not inherited from the parent timeline.
    ## Suggested values include: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies the numeric portion of a time interval
    attribute interval {
      xsd:float { minExclusive = "0" }
      | "unknown"
    }?,
    
    ## identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point.
    attribute since { xsd:anyURI }?,
    empty
  }
timeline =
  
  ## (timeline) provides a set of ordered points in time which can be linked to elements of a spoken text to create a temporal alignment of that text.
  element timeline {
    when+,
    att.global.attributes,
    
    ## designates the origin of the timeline, i.e. the time at which it begins.
    attribute origin { xsd:anyURI }?,
    
    ## specifies the unit of time corresponding to the interval value of the timeline or of its constituent points in time.
    ## Suggested values include: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies the numeric portion of a time interval
    attribute interval {
      xsd:float { minExclusive = "0" }
      | "regular"
      | "irregular"
    }?,
    empty
  }
join =
  
  ## identifies a possibly fragmented segment of text, by pointing at the possibly discontiguous elements which compose it.
  element join {
    model.glossLike*,
    att.global.attributes,
    att.pointing.attributes,
    
    ## specifies the identifiers of the elements or passages to be joined into a virtual element.
    attribute targets {
      list { xsd:anyURI, xsd:anyURI+ }
    },
    
    ## specifies the name of an element which this aggregation may be understood to represent.
    attribute result { xsd:Name }?,
    
    ## indicates whether the targets to be joined include the entire element indicated (the entire subtree including its root), or just the children of the target (the branches of the subtree).
    [ a:defaultValue = "root" ]
    attribute scope {
      
      ## the rooted subtrees indicated by the targets attribute are joined, each subtree become a child of the virtual element created by the join
      "root"
      | 
        ## the children of the subtrees indicated by the targets attribute become the children of the virtual element (i.e. the roots of the subtrees are discarded)
        "branches"
    }?,
    empty
  }
joinGrp =
  
  ## (join group) groups a collection of join elements and possibly pointers.
  element joinGrp {
    (model.glossLike*, (join | ptr)+),
    att.global.attributes,
    att.pointing.group.attributes,
    
    ## describes the result of the joins gathered in this collection.
    attribute result { xsd:Name }?,
    empty
  }
alt =
  
  ## (alternation) identifies an alternation or a set of choices among elements or passages.
  element alt {
    empty,
    att.global.attributes,
    att.pointing.attributes,
    
    ## specifies the identifiers of the alternative elements or passages.
    attribute targets {
      list { xsd:anyURI, xsd:anyURI+ }
    },
    
    ## states whether the alternations gathered in this collection are exclusive or
    ##                 inclusive.
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the
      ##                         alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of
        ##                         the alternatives occur.
        "incl"
    }?,
    
    ## If mode is , each weight states the probability that
    ##                 the corresponding alternative occurs. If mode is incl each
    ##                 weight states the probability that the corresponding alternative occurs given that
    ##                 at least one of the other alternatives occurs.
    attribute weights {
      list {
        xsd:double { minInclusive = "0" maxInclusive = "1" },
        xsd:double { minInclusive = "0" maxInclusive = "1" }+
      }
    }?,
    empty
  }
altGrp =
  
  ## (alternation group) groups a collection of alt elements and possibly pointers.
  element altGrp {
    (alt | ptr)*,
    att.global.attributes,
    att.pointing.group.attributes,
    
    ## states whether the alternations gathered in this collection are exclusive or
    ##                 inclusive.
    [ a:defaultValue = "excl" ]
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the
      ##                         alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of
        ##                         the alternatives occur.
        "incl"
    }?,
    empty
  }
att.global.linking.attributes =
  att.global.linking.attribute.corresp,
  att.global.linking.attribute.synch,
  att.global.linking.attribute.sameAs,
  att.global.linking.attribute.copyOf,
  att.global.linking.attribute.next,
  att.global.linking.attribute.prev,
  att.global.linking.attribute.exclude,
  att.global.linking.attribute.select
att.global.linking.attribute.corresp =
  
  ## (corresponds) points to elements that correspond to the current
  ##       element in some way.
  attribute corresp {
    list { xsd:anyURI+ }
  }?
att.global.linking.attribute.synch =
  
  ## (synchronous) points to elements that are synchronous with the current
  ##       element.
  attribute synch {
    list { xsd:anyURI+ }
  }?
att.global.linking.attribute.sameAs =
  
  ## points to an element that is the same as the current
  ##       element.
  attribute sameAs { xsd:anyURI }?
att.global.linking.attribute.copyOf =
  
  ## points to an element of which the current element is a
  ##	copy.
  attribute copyOf { xsd:anyURI }?
att.global.linking.attribute.next =
  
  ## points to the next element of a virtual aggregate of which
  ##       the current element is part.
  attribute next { xsd:anyURI }?
att.global.linking.attribute.prev =
  
  ## (previous) points to the previous element of a virtual aggregate of
  ##       which the current element is part.
  attribute prev { xsd:anyURI }?
att.global.linking.attribute.exclude =
  
  ## points to elements that are in exclusive alternation
  ##       with the current element.
  attribute exclude {
    list { xsd:anyURI+ }
  }?
att.global.linking.attribute.select =
  
  ## selects one or more alternants; if one alternant is
  ##       selected, the ambiguity or uncertainty is marked as resolved. If
  ##       more than one alternant is selected, the degree of ambiguity or
  ##       uncertainty is marked as reduced by the number of alternants not
  ##       selected.
  attribute select {
    list { xsd:anyURI+ }
  }?
att.pointing.attributes =
  att.pointing.attribute.type, att.pointing.attribute.evaluate
att.pointing.attribute.type =
  
  ## categorizes the pointer in some respect, using any
  ##       convenient set of categories.
  attribute type { xsd:Name }?
att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a
  ##       pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then
    ##	  the target of that pointer will be taken, and so on, until
    ##	  an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then
      ##	  its target (whether a pointer or not) is taken as the target
      ##	  of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out
      ##	  beyond that needed to find the element specified in the
      ##	  pointer's target.
      "none"
  }?
att.pointing.group.attributes =
  att.pointing.attributes,
  att.pointing.group.attribute.domains,
  att.pointing.group.attribute.targFunc
att.pointing.group.attribute.domains =
  
  ## optionally specifies the identifiers of the elements
  ##       within which all elements indicated by the contents of this
  ##       element lie.
  attribute domains {
    list { xsd:Name, xsd:Name+ }
  }?
att.pointing.group.attribute.targFunc =
  
  ## (target function) describes the function of each of the values of the
  ##       targets attribute of the enclosed link,
  ##       join, or alt tags.
  attribute targFunc {
    list {
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" },
      xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
    }
  }?
figure =
  
  ## groups elements representing or containing graphic information such as an illustration or
  ##     figure.
  element figure {
    (model.headLike
     | model.pLike
     | figDesc
     | model.graphicLike
     | model.egLike
     | model.global)*,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.placement.attributes,
    empty
  }
figDesc =
  
  ## (description of figure) contains a brief prose description of the appearance or content
  ## of a graphic figure, for use when documenting an image without
  ## displaying it.
  element figDesc {
    macro.limitedContent,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    empty
  }
orgName =
  
  ## (organization name) contains an organizational name.
  element orgName {
    macro.phraseSeq,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.datable.iso.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attribute.subtype,
    empty
  }
placeName =
  
  ## contains an absolute or relative place name.
  element placeName {
    macro.phraseSeq,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    att.datable.iso.attributes,
    att.editLike.attributes,
    empty
  }
geo =
  
  ## (geographical coordinates) contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some
  ##         notation.
  element geo { text, att.global.attributes, empty }
location =
  
  ## defines the location of a place as a set of geographical coordinates, in terms of a other named geo-political entities, or as an
  ##         address.
  element location {
    (model.labelLike
     | model.placeNamePart
     | model.offsetLike
     | model.measureLike
     | model.addressLike
     | model.noteLike
     | model.biblLike)*,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    
    ## characterizes the element in some sense, using any convenient
    ##  classification scheme or typology.
    attribute type {
      
      ##
      "address"
    }?,
    att.typed.attribute.subtype,
    att.datable.w3c.attribute.when,
    att.datable.iso.attributes,
    att.editLike.attributes,
    empty
  }
org =
  
  ## (organization) provides information about an identifiable organization such as a business, a tribe, or
  ##         any other grouping of people.
  element org {
    idno*,
    (model.labelLike
     | model.placeTraitLike
     | model.nameLike
     | model.placeLike
     | model.noteLike)*,
    
    ##
    attribute oxpID { text }?,
    
    ## specifies a primary role or classification for the organization.
    attribute role {
      list {
        xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }+
      }
    }?,
    att.global.attributes,
    att.datable.w3c.attributes,
    att.datable.iso.attributes,
    att.typed.attributes,
    empty
  }
place =
  
  ## contains data about a geographic location
  element place {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.placeStateLike
         | model.placeTraitLike
         | model.placeEventLike)*),
     (model.noteLike | model.biblLike)*,
     model.placeLike*),
    
    ##
    attribute oxpID { text }?,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.datable.w3c.attributes,
    att.datable.iso.attributes,
    att.typed.attributes,
    empty
  }
relation =
  
  ## (relationship) describes any kind of relationship or linkage amongst a specified group of participants.
  element relation {
    (desc?)
    >> sch:pattern [
         id = "relation-constraint-activemutual"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@active and @mutual"
             "Only one of the attributes\x{a}" ~
             "	'active' and 'mutual' may be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "relation-constraint-activepassive"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@passive and not(@active)"
             "the attribute 'passive'\x{a}" ~
             "	may be supplied only if the attribute 'active' is\x{a}" ~
             "	supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    
    ## categorizes the relationship in some respect, e.g. as social, personal or other.
    ## Suggested values include: 1] social; 2] personal; 3] other
    [ a:defaultValue = "personal" ]
    attribute type {
      list {
        (
         ## relationship concerned with social roles
         "social"
         | 
           ## relationship concerned with personal roles, e.g. kinship, marriage, etc.
           "personal"
         | 
           ## other kinds of relationship
           "other"
         | xsd:Name),
        (
         ## relationship concerned with social roles
         "social"
         | 
           ## relationship concerned with personal roles, e.g. kinship, marriage, etc.
           "personal"
         | 
           ## other kinds of relationship
           "other"
         | xsd:Name)?
      }
    }?,
    
    ## supplies a name for the kind of relationship of which this is an instance.
    attribute name {
      
      ##
      "controls"
      | 
        ##
        "occupies"
    },
    
    ## identifies the passive participants in a non-mutual relationship.
    attribute passive {
      list { xsd:anyURI+ }
    }?,
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.datable.w3c.attribute.from,
    att.datable.iso.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    empty
  }
trait =
  
  ## contains a description of some culturally-determined and in principle unchanging characteristic attributed to a person or place .
  element trait {
    (trait+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attribute.xmlspace,
    att.global.linking.attributes,
    att.datable.w3c.attribute.from,
    att.datable.w3c.attribute.to,
    att.datable.iso.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    
    ## characterizes the element in some sense, using any convenient
    ##  classification scheme or typology.
    attribute type {
      
      ##
      "figure"
      | 
        ##
        "iturl"
      | 
        ##
        "liburl"
      | 
        ##
        "type"
      | 
        ##
        "url"
      | 
        ##
        "weblearn"
    }?,
    att.typed.attribute.subtype,
    empty
  }
att.datable.iso.attributes = empty
start = place | org
